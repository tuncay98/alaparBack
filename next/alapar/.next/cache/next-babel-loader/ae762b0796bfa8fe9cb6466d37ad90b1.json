{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport * as types from '../../store/types';\nimport { connect } from 'react-redux';\nimport Utilities from '@/utilities';\n\nconst mapStateToProps = state => {\n  return {\n    redux: state.redux\n  };\n};\n\nclass Filter extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidUpdate\", async (prevProps, prevState) => {\n      if (prevState.selected !== this.state.selected) {\n        console.log(this.state.selected);\n        let conn = await fetch(\"http://192.168.1.107:5566/api/bina/search\", {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          mode: 'cors',\n          body: JSON.stringify(this.state.selected)\n        });\n        let res = await conn.json();\n        this.props.dispatch({\n          type: types.SAVE_FILTER,\n          payload: res\n        });\n      }\n    });\n\n    _defineProperty(this, \"categoryCallback\", (value, options) => {\n      let row = this.props.filterJson.categories.find(w => w.id == value);\n      this.setState({\n        selected: _objectSpread(_objectSpread({}, this.state.selected), {}, {\n          category: value\n        }),\n        addition: _objectSpread(_objectSpread({}, this.state.addition), {}, {\n          roomAmount: row ? row.roomAmount : false,\n          apartmantFloor: row ? row.floor : false,\n          buildingFloor: row ? row.buildingFloor : false,\n          landAppointment: row ? row.landAppointment : false\n        })\n      });\n    });\n\n    _defineProperty(this, \"cityCallback\", value => {\n      let regions = this.state.cityList.find(w => w.id == value).regions;\n      let metros = this.state.cityList.find(w => w.id == value).metros;\n      this.setState({\n        selected: _objectSpread(_objectSpread({}, this.state.selected), {}, {\n          city: value,\n          region: null,\n          village: null,\n          metro: null\n        }),\n        metroList: !metros.length ? null : metros,\n        regionList: !regions.length ? null : regions,\n        villageList: null\n      });\n    });\n\n    _defineProperty(this, \"regionCallback\", value => {\n      if (!value) {\n        this.setState({\n          selected: _objectSpread(_objectSpread({}, this.state.selected), {}, {\n            region: 0,\n            village: null\n          }),\n          villageList: null\n        });\n        return;\n      }\n\n      let villages = this.state.regionList.find(w => w.id == value).villages;\n      this.setState({\n        selected: _objectSpread(_objectSpread({}, this.state.selected), {}, {\n          region: value,\n          village: null\n        }),\n        villageList: !villages.length ? null : villages\n      });\n    });\n\n    _defineProperty(this, \"checkboxCallback\", e => {\n      let value = e.target.checked;\n      this.setState({\n        selected: _objectSpread(_objectSpread({}, this.state.selected), {}, {\n          [e.target.state]: value\n        })\n      });\n    });\n\n    _defineProperty(this, \"numberCommonCallback\", e => {\n      if (typeof parseInt(e.target.ariaValueNow) !== 'number') return;\n      this.setState({\n        selected: _objectSpread(_objectSpread({}, this.state.selected), {}, {\n          [e.target.name]: parseInt(e.target.ariaValueNow)\n        })\n      });\n    });\n\n    _defineProperty(this, \"commonCallback\", (value, option) => {\n      this.setState({\n        selected: _objectSpread(_objectSpread({}, this.state.selected), {}, {\n          [option.state]: value\n        })\n      });\n    });\n\n    this.utility = new Utilities(this);\n    this.state = {\n      selected: {\n        category: null,\n        city: null,\n        region: null,\n        village: null,\n        metro: null,\n        minPrice: null,\n        maxPrice: null,\n        minArea: null,\n        maxArea: null,\n        sellType: null,\n        licence: null,\n        ipoteka: null,\n        minRoomAmount: null,\n        maxRoomAmount: null,\n        minApartmantFloor: null,\n        maxApartmantFloor: null,\n        minFloorAmount: null,\n        maxFloorAmount: null\n      },\n      categoryList: null,\n      cityList: null,\n      regionList: null,\n      villageList: null,\n      metroList: null,\n      price: true,\n      area: true,\n      addition: {\n        roomAmount: false,\n        apartmantFloor: false,\n        floorAmount: false,\n        landAppointment: false\n      }\n    };\n\n    if (props.filterJson.categories) {\n      this.state.categoryList = props.filterJson.categories;\n    }\n\n    if (props.filterJson.cities) {\n      this.state.cityList = props.filterJson.cities;\n    }\n  }\n\n  render(h) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: 'filter',\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: 'containerFilter',\n        children: [this.utility.selectGenerator(\"Kategoriya:\", this.state.categoryList, \"Category\", this.state.selected.category, this.categoryCallback, false, false), this.utility.selectGenerator(\"Şəhər:\", this.state.cityList, \"City\", this.state.selected.city, this.cityCallback, true, false), this.utility.selectGenerator(\"Rayon:\", this.state.regionList, \"Region\", this.state.selected.region, this.regionCallback, true, true), this.utility.selectGenerator(\"Qəsəbə:\", this.state.villageList, \"village\", this.state.selected.village, this.commonCallback, true, true), this.utility.selectGenerator(\"Metro:\", this.state.metroList, \"metro\", this.state.selected.metro, this.commonCallback, true, true), this.utility.priceİnputGenerator(\"Otaq Sayı:\", \"minRoomAmount\", \"maxRoomAmount\", 1, 1, this.minRoomAmountCallback, this.maxRoomAmountCallback, this.state.addition.roomAmount), this.utility.priceİnputGenerator(\"Qiymət:\", \"minPrice\", \"maxPrice\", 1000, 1000, this.numberCommonCallback, this.state.price), this.utility.priceİnputGenerator(\"Sahə:\", \"minArea\", \"maxArea\", 10, 1, this.numberCommonCallback, this.state.area), this.utility.checkBoxGenerator(\"Çıxarış:\", this.checkboxCallback, \"licence\"), this.utility.checkBoxGenerator(\"Ipoteka:\", this.checkboxCallback, \"ipoteka\"), Object.values(this.state.addition).includes(true) ? this.utility.collapseAddition() : null]\n      })\n    });\n  }\n\n}\n\nexport default connect(mapStateToProps)(Filter);","map":null,"metadata":{},"sourceType":"module"}