{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as types from '../types';\nconst initialState = {\n  searched: null\n};\nexport const saveFilterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.SAVE_FILTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filterJson: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/tunca/Desktop/AlApar_master/next/alapar/store/reducers/save_filter.js"],"names":["types","initialState","searched","saveFilterReducer","state","action","type","SAVE_FILTER","filterJson","payload"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AADO,CAArB;AAIA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,KAAK,CAACO,WAAX;AACI,6CACOH,KADP;AAEII,QAAAA,UAAU,EAAEH,MAAM,CAACI;AAFvB;;AAIJ;AACI,aAAOL,KAAP;AAPR;AASH,CAVM","sourcesContent":["import * as types from '../types'\r\n\r\nconst initialState = {\r\n    searched: null\r\n}\r\n\r\nexport const saveFilterReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.SAVE_FILTER:\r\n            return {\r\n                ...state,\r\n                filterJson: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}