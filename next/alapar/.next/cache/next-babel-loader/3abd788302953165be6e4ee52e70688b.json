{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tunca\\\\Desktop\\\\AlApar_master\\\\next\\\\alapar\\\\pages\\\\test.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst {\n  Component\n} = require(\"react\");\n\nclass Test extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"render\", () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n            width: \"560\",\n            height: \"315\",\n            src: \"//www.plaid.com\",\n            frameborder: \"0\",\n            allowfullscreen: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this);\n    });\n  }\n\n}\n\nexport default Test;","map":{"version":3,"sources":["C:/Users/tunca/Desktop/AlApar_master/next/alapar/pages/test.js"],"names":["Component","require","Test","constructor"],"mappings":";;;;;AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,OAAD,CAA7B;;AAGA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AACzBG,EAAAA,WAAW,GAAG;AACV;;AADU,oCAIL,MAAM;AACX,0BACI;AAAA,+BACI;AAAA,iCACI;AAAQ,YAAA,KAAK,EAAC,KAAd;AAAoB,YAAA,MAAM,EAAC,KAA3B;AAAiC,YAAA,GAAG,EAAC,iBAArC;AAAuD,YAAA,WAAW,EAAC,GAAnE;AAAuE,YAAA,eAAe;AAAtF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KAZa;AAEb;;AAHwB;;AAgB7B,eAAeD,IAAf","sourcesContent":["const { Component } = require(\"react\");\r\n\r\n\r\nclass Test extends Component {\r\n    constructor() {\r\n        super()\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <iframe width=\"560\" height=\"315\" src=\"//www.plaid.com\" frameborder=\"0\" allowfullscreen></iframe>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Test;"]},"metadata":{},"sourceType":"module"}